// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: graph.proto

package graph

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GraphService_CreateUserNode_FullMethodName      = "/graph.GraphService/CreateUserNode"
	GraphService_DeleteUserNode_FullMethodName      = "/graph.GraphService/DeleteUserNode"
	GraphService_ConnectUsers_FullMethodName        = "/graph.GraphService/ConnectUsers"
	GraphService_DisconnectUsers_FullMethodName     = "/graph.GraphService/DisconnectUsers"
	GraphService_GetConnectedUsers_FullMethodName   = "/graph.GraphService/GetConnectedUsers"
	GraphService_CheckConnectionPath_FullMethodName = "/graph.GraphService/CheckConnectionPath"
)

// GraphServiceClient is the client API for GraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphServiceClient interface {
	CreateUserNode(ctx context.Context, in *CreateUserNodeRequest, opts ...grpc.CallOption) (*CreateUserNodeResponse, error)
	DeleteUserNode(ctx context.Context, in *DeleteUserNodeRequest, opts ...grpc.CallOption) (*DeleteUserNodeResponse, error)
	ConnectUsers(ctx context.Context, in *ConnectUsersRequest, opts ...grpc.CallOption) (*ConnectUsersResponse, error)
	DisconnectUsers(ctx context.Context, in *DisconnectUsersRequest, opts ...grpc.CallOption) (*DisconnectUsersResponse, error)
	GetConnectedUsers(ctx context.Context, in *GetConnectedUsersRequest, opts ...grpc.CallOption) (*GetConnectedUsersResponse, error)
	CheckConnectionPath(ctx context.Context, in *CheckConnectionPathRequest, opts ...grpc.CallOption) (*CheckConnectionPathResponse, error)
}

type graphServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphServiceClient(cc grpc.ClientConnInterface) GraphServiceClient {
	return &graphServiceClient{cc}
}

func (c *graphServiceClient) CreateUserNode(ctx context.Context, in *CreateUserNodeRequest, opts ...grpc.CallOption) (*CreateUserNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserNodeResponse)
	err := c.cc.Invoke(ctx, GraphService_CreateUserNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DeleteUserNode(ctx context.Context, in *DeleteUserNodeRequest, opts ...grpc.CallOption) (*DeleteUserNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserNodeResponse)
	err := c.cc.Invoke(ctx, GraphService_DeleteUserNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) ConnectUsers(ctx context.Context, in *ConnectUsersRequest, opts ...grpc.CallOption) (*ConnectUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectUsersResponse)
	err := c.cc.Invoke(ctx, GraphService_ConnectUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DisconnectUsers(ctx context.Context, in *DisconnectUsersRequest, opts ...grpc.CallOption) (*DisconnectUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisconnectUsersResponse)
	err := c.cc.Invoke(ctx, GraphService_DisconnectUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetConnectedUsers(ctx context.Context, in *GetConnectedUsersRequest, opts ...grpc.CallOption) (*GetConnectedUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConnectedUsersResponse)
	err := c.cc.Invoke(ctx, GraphService_GetConnectedUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CheckConnectionPath(ctx context.Context, in *CheckConnectionPathRequest, opts ...grpc.CallOption) (*CheckConnectionPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckConnectionPathResponse)
	err := c.cc.Invoke(ctx, GraphService_CheckConnectionPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServiceServer is the server API for GraphService service.
// All implementations must embed UnimplementedGraphServiceServer
// for forward compatibility.
type GraphServiceServer interface {
	CreateUserNode(context.Context, *CreateUserNodeRequest) (*CreateUserNodeResponse, error)
	DeleteUserNode(context.Context, *DeleteUserNodeRequest) (*DeleteUserNodeResponse, error)
	ConnectUsers(context.Context, *ConnectUsersRequest) (*ConnectUsersResponse, error)
	DisconnectUsers(context.Context, *DisconnectUsersRequest) (*DisconnectUsersResponse, error)
	GetConnectedUsers(context.Context, *GetConnectedUsersRequest) (*GetConnectedUsersResponse, error)
	CheckConnectionPath(context.Context, *CheckConnectionPathRequest) (*CheckConnectionPathResponse, error)
	mustEmbedUnimplementedGraphServiceServer()
}

// UnimplementedGraphServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGraphServiceServer struct{}

func (UnimplementedGraphServiceServer) CreateUserNode(context.Context, *CreateUserNodeRequest) (*CreateUserNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserNode not implemented")
}
func (UnimplementedGraphServiceServer) DeleteUserNode(context.Context, *DeleteUserNodeRequest) (*DeleteUserNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserNode not implemented")
}
func (UnimplementedGraphServiceServer) ConnectUsers(context.Context, *ConnectUsersRequest) (*ConnectUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectUsers not implemented")
}
func (UnimplementedGraphServiceServer) DisconnectUsers(context.Context, *DisconnectUsersRequest) (*DisconnectUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectUsers not implemented")
}
func (UnimplementedGraphServiceServer) GetConnectedUsers(context.Context, *GetConnectedUsersRequest) (*GetConnectedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectedUsers not implemented")
}
func (UnimplementedGraphServiceServer) CheckConnectionPath(context.Context, *CheckConnectionPathRequest) (*CheckConnectionPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnectionPath not implemented")
}
func (UnimplementedGraphServiceServer) mustEmbedUnimplementedGraphServiceServer() {}
func (UnimplementedGraphServiceServer) testEmbeddedByValue()                      {}

// UnsafeGraphServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphServiceServer will
// result in compilation errors.
type UnsafeGraphServiceServer interface {
	mustEmbedUnimplementedGraphServiceServer()
}

func RegisterGraphServiceServer(s grpc.ServiceRegistrar, srv GraphServiceServer) {
	// If the following call pancis, it indicates UnimplementedGraphServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GraphService_ServiceDesc, srv)
}

func _GraphService_CreateUserNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateUserNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_CreateUserNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateUserNode(ctx, req.(*CreateUserNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DeleteUserNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DeleteUserNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_DeleteUserNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DeleteUserNode(ctx, req.(*DeleteUserNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_ConnectUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).ConnectUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_ConnectUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).ConnectUsers(ctx, req.(*ConnectUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DisconnectUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DisconnectUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_DisconnectUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DisconnectUsers(ctx, req.(*DisconnectUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetConnectedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetConnectedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_GetConnectedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetConnectedUsers(ctx, req.(*GetConnectedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CheckConnectionPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConnectionPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CheckConnectionPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphService_CheckConnectionPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CheckConnectionPath(ctx, req.(*CheckConnectionPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphService_ServiceDesc is the grpc.ServiceDesc for GraphService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graph.GraphService",
	HandlerType: (*GraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserNode",
			Handler:    _GraphService_CreateUserNode_Handler,
		},
		{
			MethodName: "DeleteUserNode",
			Handler:    _GraphService_DeleteUserNode_Handler,
		},
		{
			MethodName: "ConnectUsers",
			Handler:    _GraphService_ConnectUsers_Handler,
		},
		{
			MethodName: "DisconnectUsers",
			Handler:    _GraphService_DisconnectUsers_Handler,
		},
		{
			MethodName: "GetConnectedUsers",
			Handler:    _GraphService_GetConnectedUsers_Handler,
		},
		{
			MethodName: "CheckConnectionPath",
			Handler:    _GraphService_CheckConnectionPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "graph.proto",
}
