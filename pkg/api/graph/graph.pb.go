// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.6.1
// source: graph.proto

package graph

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateUserNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserNodeRequest) Reset() {
	*x = CreateUserNodeRequest{}
	mi := &file_graph_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserNodeRequest) ProtoMessage() {}

func (x *CreateUserNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateUserNodeRequest) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{0}
}

func (x *CreateUserNodeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateUserNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateUserNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserNodeResponse) Reset() {
	*x = CreateUserNodeResponse{}
	mi := &file_graph_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserNodeResponse) ProtoMessage() {}

func (x *CreateUserNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateUserNodeResponse) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DeleteUserNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserNodeRequest) Reset() {
	*x = DeleteUserNodeRequest{}
	mi := &file_graph_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserNodeRequest) ProtoMessage() {}

func (x *DeleteUserNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserNodeRequest) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteUserNodeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type DeleteUserNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUserNodeResponse) Reset() {
	*x = DeleteUserNodeResponse{}
	mi := &file_graph_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserNodeResponse) ProtoMessage() {}

func (x *DeleteUserNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserNodeResponse) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteUserNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ConnectUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId_1      string                 `protobuf:"bytes,1,opt,name=user_id_1,json=userId1,proto3" json:"user_id_1,omitempty"`
	UserId_2      string                 `protobuf:"bytes,2,opt,name=user_id_2,json=userId2,proto3" json:"user_id_2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectUsersRequest) Reset() {
	*x = ConnectUsersRequest{}
	mi := &file_graph_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectUsersRequest) ProtoMessage() {}

func (x *ConnectUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectUsersRequest.ProtoReflect.Descriptor instead.
func (*ConnectUsersRequest) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{4}
}

func (x *ConnectUsersRequest) GetUserId_1() string {
	if x != nil {
		return x.UserId_1
	}
	return ""
}

func (x *ConnectUsersRequest) GetUserId_2() string {
	if x != nil {
		return x.UserId_2
	}
	return ""
}

type ConnectUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectUsersResponse) Reset() {
	*x = ConnectUsersResponse{}
	mi := &file_graph_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectUsersResponse) ProtoMessage() {}

func (x *ConnectUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectUsersResponse.ProtoReflect.Descriptor instead.
func (*ConnectUsersResponse) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{5}
}

func (x *ConnectUsersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DisconnectUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId_1      string                 `protobuf:"bytes,1,opt,name=user_id_1,json=userId1,proto3" json:"user_id_1,omitempty"`
	UserId_2      string                 `protobuf:"bytes,2,opt,name=user_id_2,json=userId2,proto3" json:"user_id_2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectUsersRequest) Reset() {
	*x = DisconnectUsersRequest{}
	mi := &file_graph_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectUsersRequest) ProtoMessage() {}

func (x *DisconnectUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectUsersRequest.ProtoReflect.Descriptor instead.
func (*DisconnectUsersRequest) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{6}
}

func (x *DisconnectUsersRequest) GetUserId_1() string {
	if x != nil {
		return x.UserId_1
	}
	return ""
}

func (x *DisconnectUsersRequest) GetUserId_2() string {
	if x != nil {
		return x.UserId_2
	}
	return ""
}

type DisconnectUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectUsersResponse) Reset() {
	*x = DisconnectUsersResponse{}
	mi := &file_graph_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectUsersResponse) ProtoMessage() {}

func (x *DisconnectUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectUsersResponse.ProtoReflect.Descriptor instead.
func (*DisconnectUsersResponse) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{7}
}

func (x *DisconnectUsersResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetConnectedUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConnectedUsersRequest) Reset() {
	*x = GetConnectedUsersRequest{}
	mi := &file_graph_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectedUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectedUsersRequest) ProtoMessage() {}

func (x *GetConnectedUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectedUsersRequest.ProtoReflect.Descriptor instead.
func (*GetConnectedUsersRequest) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{8}
}

func (x *GetConnectedUsersRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetConnectedUsersResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ConnectedUserIds []string               `protobuf:"bytes,1,rep,name=connected_user_ids,json=connectedUserIds,proto3" json:"connected_user_ids,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetConnectedUsersResponse) Reset() {
	*x = GetConnectedUsersResponse{}
	mi := &file_graph_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConnectedUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectedUsersResponse) ProtoMessage() {}

func (x *GetConnectedUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectedUsersResponse.ProtoReflect.Descriptor instead.
func (*GetConnectedUsersResponse) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{9}
}

func (x *GetConnectedUsersResponse) GetConnectedUserIds() []string {
	if x != nil {
		return x.ConnectedUserIds
	}
	return nil
}

type CheckConnectionPathRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId_1      string                 `protobuf:"bytes,1,opt,name=user_id_1,json=userId1,proto3" json:"user_id_1,omitempty"`
	UserId_2      string                 `protobuf:"bytes,2,opt,name=user_id_2,json=userId2,proto3" json:"user_id_2,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckConnectionPathRequest) Reset() {
	*x = CheckConnectionPathRequest{}
	mi := &file_graph_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckConnectionPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectionPathRequest) ProtoMessage() {}

func (x *CheckConnectionPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectionPathRequest.ProtoReflect.Descriptor instead.
func (*CheckConnectionPathRequest) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{10}
}

func (x *CheckConnectionPathRequest) GetUserId_1() string {
	if x != nil {
		return x.UserId_1
	}
	return ""
}

func (x *CheckConnectionPathRequest) GetUserId_2() string {
	if x != nil {
		return x.UserId_2
	}
	return ""
}

type CheckConnectionPathResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PathExists    bool                   `protobuf:"varint,1,opt,name=path_exists,json=pathExists,proto3" json:"path_exists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckConnectionPathResponse) Reset() {
	*x = CheckConnectionPathResponse{}
	mi := &file_graph_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckConnectionPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectionPathResponse) ProtoMessage() {}

func (x *CheckConnectionPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectionPathResponse.ProtoReflect.Descriptor instead.
func (*CheckConnectionPathResponse) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{11}
}

func (x *CheckConnectionPathResponse) GetPathExists() bool {
	if x != nil {
		return x.PathExists
	}
	return false
}

var File_graph_proto protoreflect.FileDescriptor

var file_graph_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x22, 0x44, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x30,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x32, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x4d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x31, 0x12, 0x1a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x32, 0x22, 0x30, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x31, 0x12, 0x1a, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x32, 0x22, 0x33, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x54, 0x0a, 0x1a,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x31, 0x12, 0x1a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x32, 0x22, 0x3e, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x32, 0x89, 0x04, 0x0a, 0x0c, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x19,
	0x5a, 0x17, 0x67, 0x72, 0x61, 0x70, 0x68, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_graph_proto_rawDescOnce sync.Once
	file_graph_proto_rawDescData []byte
)

func file_graph_proto_rawDescGZIP() []byte {
	file_graph_proto_rawDescOnce.Do(func() {
		file_graph_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_graph_proto_rawDesc), len(file_graph_proto_rawDesc)))
	})
	return file_graph_proto_rawDescData
}

var file_graph_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_graph_proto_goTypes = []any{
	(*CreateUserNodeRequest)(nil),       // 0: graph.CreateUserNodeRequest
	(*CreateUserNodeResponse)(nil),      // 1: graph.CreateUserNodeResponse
	(*DeleteUserNodeRequest)(nil),       // 2: graph.DeleteUserNodeRequest
	(*DeleteUserNodeResponse)(nil),      // 3: graph.DeleteUserNodeResponse
	(*ConnectUsersRequest)(nil),         // 4: graph.ConnectUsersRequest
	(*ConnectUsersResponse)(nil),        // 5: graph.ConnectUsersResponse
	(*DisconnectUsersRequest)(nil),      // 6: graph.DisconnectUsersRequest
	(*DisconnectUsersResponse)(nil),     // 7: graph.DisconnectUsersResponse
	(*GetConnectedUsersRequest)(nil),    // 8: graph.GetConnectedUsersRequest
	(*GetConnectedUsersResponse)(nil),   // 9: graph.GetConnectedUsersResponse
	(*CheckConnectionPathRequest)(nil),  // 10: graph.CheckConnectionPathRequest
	(*CheckConnectionPathResponse)(nil), // 11: graph.CheckConnectionPathResponse
}
var file_graph_proto_depIdxs = []int32{
	0,  // 0: graph.GraphService.CreateUserNode:input_type -> graph.CreateUserNodeRequest
	2,  // 1: graph.GraphService.DeleteUserNode:input_type -> graph.DeleteUserNodeRequest
	4,  // 2: graph.GraphService.ConnectUsers:input_type -> graph.ConnectUsersRequest
	6,  // 3: graph.GraphService.DisconnectUsers:input_type -> graph.DisconnectUsersRequest
	8,  // 4: graph.GraphService.GetConnectedUsers:input_type -> graph.GetConnectedUsersRequest
	10, // 5: graph.GraphService.CheckConnectionPath:input_type -> graph.CheckConnectionPathRequest
	1,  // 6: graph.GraphService.CreateUserNode:output_type -> graph.CreateUserNodeResponse
	3,  // 7: graph.GraphService.DeleteUserNode:output_type -> graph.DeleteUserNodeResponse
	5,  // 8: graph.GraphService.ConnectUsers:output_type -> graph.ConnectUsersResponse
	7,  // 9: graph.GraphService.DisconnectUsers:output_type -> graph.DisconnectUsersResponse
	9,  // 10: graph.GraphService.GetConnectedUsers:output_type -> graph.GetConnectedUsersResponse
	11, // 11: graph.GraphService.CheckConnectionPath:output_type -> graph.CheckConnectionPathResponse
	6,  // [6:12] is the sub-list for method output_type
	0,  // [0:6] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_graph_proto_init() }
func file_graph_proto_init() {
	if File_graph_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_graph_proto_rawDesc), len(file_graph_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_graph_proto_goTypes,
		DependencyIndexes: file_graph_proto_depIdxs,
		MessageInfos:      file_graph_proto_msgTypes,
	}.Build()
	File_graph_proto = out.File
	file_graph_proto_goTypes = nil
	file_graph_proto_depIdxs = nil
}
